La diferencia entre [...this.characters] y this.characters
Estas dos asignaciones parecen similares pero se comportan de forma muy diferente cuando se trabaja con arrays:
typescript// Usando el operador spread se crea un nuevo array (una copia)
this.filteredCharacters = [...this.characters];


// La asignación directa crea una referencia al mismo array
this.filteredCharacters = this.characters;
Diferencia clave: Referencia vs. Copia
Asignación Directa (Crea una Referencia)
Cuando escribes:
typescriptthis.filteredCharacters = this.characters;
No estás copiando el array - estás haciendo que filteredCharacters apunte exactamente al mismo array en memoria que characters. Se convierten en alias para los mismos datos.
Operador Spread (Crea una copia)
Cuando escribes:
typescriptthis.filteredCharacters = [...this.characters];
Estás creando un array completamente nuevo con los mismos elementos que el original. El nuevo array es independiente del original.
Por qué es importante: Ilustración con Código
Déjeme mostrarle por qué esto es importante:


// ESCENARIO 1: Usando referencia directa
let characters = [
 { id: '1', name: 'Rick' },
 { id: '2', name: 'Morty' }
];


// Asignación directa - crea una referencia
let caracteresfiltrados = caracteres;


// Si modificamos filteredCharacters
filteredCharacters.push({ id: '3', name: 'Summer' });


console.log('ESCENARIO 1:');
console.log('characters:', characters);
console.log('filteredCharacters:', filteredCharacters);
// ¡Ambos arrays contienen ahora Summer!


// ESCENARIO 2: Usando el operador spread
characters = [
 { id: '1', name: 'Rick' },
 { id: '2', name: 'Morty' }
];


// Operador Spread - crea una nueva copia
filteredCharacters = [...characters];


// Si modificamos filteredCharacters
filteredCharacters.push({ id: '3', name: 'Summer' });


console.log('\nSCENARIO 2:');
console.log('characters:', characters);
console.log('filteredCharacters:', filteredCharacters);
// ¡Sólo filteredCharacters contiene Summer!


Impacto real en tu aplicación Angular
En tu componente de filtrado de caracteres, esta diferencia es crucial:
Problemas con el uso de referencias
Si usaste asignación directa (this.filteredCharacters = this.characters):


Cuando filtras el array filteredCharacters (por ejemplo, eliminando los caracteres que no coinciden con la búsqueda):
typescript// Si usas referencia directa, ¡esto TAMBIÉN modificaría el array de caracteres original!
this.filteredCharacters = this.filteredCharacters.filter(/* ... */);


Terminarías modificando permanentemente tus datos originales
Cuando un usuario teclea, y luego borra su búsqueda, faltarían caracteres


Ventajas de utilizar copias
Al utilizar el operador de propagación (this.filteredCharacters = [...this.characters]):


Los datos originales permanecen intactos
Puede filtrar con seguridad la matriz copiada sin preocuparse por los efectos secundarios
Cuando un usuario borra su búsqueda, puede restaurar todos los caracteres haciendo una copia nueva.


Cuándo utilizar cada método
Utilice la referencia directa Cuando:


Desea explícitamente que los cambios en una matriz afecten a la otra
Está optimizando la memoria en situaciones con matrices muy grandes
Está creando referencias de sólo lectura (utilizando objetos const o congelados)


Utilice el operador Spread cuando:


Necesita manipular un array sin afectar al original
Quiere asegurar la integridad de los datos del array fuente
Está implementando características como filtrado, ordenación o gestión de estados


Nota sobre la copia superficial
El operador Spread crea una "copia superficial": la matriz en sí es nueva, pero los objetos que contiene siguen siendo referencias. Esto significa:
typescriptlet characters = [
 { id: '1', name: 'Rick' }
];
let filteredCharacters = [...characters];


// Esto todavía afecta a ambas matrices porque los objetos en sí son compartidos
filteredCharacters[0].name = 'Evil Rick';
Para copias realmente independientes, necesitarías un clon profundo (pero eso raramente se necesita para operaciones de filtrado).
En tu escenario de filtrado, el operador spread proporciona exactamente lo que necesitas: un array separado que puede ser filtrado sin afectar a tus datos originales.