The Difference Between [...this.characters] and this.characters
These two assignments look similar but behave very differently when working with arrays:
typescript// Using the spread operator creates a new array (a copy)
this.filteredCharacters = [...this.characters];

// Direct assignment creates a reference to the same array
this.filteredCharacters = this.characters;
Key Difference: Reference vs. Copy
Direct Assignment (Creates a Reference)
When you write:
typescriptthis.filteredCharacters = this.characters;
You're not copying the array - you're making filteredCharacters point to the exact same array in memory as characters. They become aliases for the same data.
Spread Operator (Creates a Copy)
When you write:
typescriptthis.filteredCharacters = [...this.characters];
You're creating a completely new array with the same elements as the original. The new array is independent of the original.
Why This Matters: Illustration with Code
Let me show you why this is important:

// SCENARIO 1: Using direct reference
let characters = [
  { id: '1', name: 'Rick' },
  { id: '2', name: 'Morty' }
];

// Direct assignment - creates a reference
let filteredCharacters = characters;

// If we modify filteredCharacters
filteredCharacters.push({ id: '3', name: 'Summer' });

console.log('SCENARIO 1:');
console.log('characters:', characters);
console.log('filteredCharacters:', filteredCharacters);
// BOTH arrays now contain Summer!

// SCENARIO 2: Using spread operator
characters = [
  { id: '1', name: 'Rick' },
  { id: '2', name: 'Morty' }
];

// Spread operator - creates a new copy
filteredCharacters = [...characters];

// If we modify filteredCharacters
filteredCharacters.push({ id: '3', name: 'Summer' });

console.log('\nSCENARIO 2:');
console.log('characters:', characters);
console.log('filteredCharacters:', filteredCharacters);
// Only filteredCharacters contains Summer!

Real Impact in Your Angular Application
In your character filtering component, this difference is crucial:
Problems With Using References
If you used direct assignment (this.filteredCharacters = this.characters):

When you filter the filteredCharacters array (e.g., removing characters that don't match the search):
typescript// If using direct reference, this would ALSO modify the original characters array!
this.filteredCharacters = this.filteredCharacters.filter(/* ... */);

You'd end up permanently modifying your original data
When a user types, then deletes their search, characters would be missing

Benefits of Using Copies
By using the spread operator (this.filteredCharacters = [...this.characters]):

The original data remains untouched
You can safely filter the copied array without worrying about side effects
When a user clears their search, you can restore all characters by making a fresh copy

When to Use Each Approach
Use Direct Reference When:

You explicitly want changes to one array to affect the other
You're optimizing for memory in situations with very large arrays
You're creating read-only references (using const or freezing objects)

Use Spread Operator When:

You need to manipulate one array without affecting the original
You want to ensure data integrity of the source array
You're implementing features like filtering, sorting, or state management

Note on Shallow Copying
The spread operator creates a "shallow copy" - the array itself is new, but the objects inside it are still references. This means:
typescriptlet characters = [
  { id: '1', name: 'Rick' }
];
let filteredCharacters = [...characters];

// This still affects both arrays because the objects themselves are shared
filteredCharacters[0].name = 'Evil Rick';
For truly independent copies, you'd need a deep clone (but that's rarely needed for filtering operations).
In your filtering scenario, the spread operator provides exactly what you need: a separate array that can be filtered without affecting your original data.